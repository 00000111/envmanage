#!/usr/bin/env python2

import copy
import os
import sys
import subprocess
import shlex

from yaml import load, dump


DIR = os.path.abspath(os.path.dirname(__file__))
ENV_JS = os.path.join(DIR, "env-js")
ENV_PY = os.path.join(DIR, "env-py")
BASE_DIR = os.path.abspath(os.curdir)

CONF_FILE = os.path.abspath(sys.argv[1])
CONF_DIR = os.path.abspath(os.path.dirname(CONF_FILE))


def pyenv_install(conf):
    dst_conf = copy.copy(conf)
    dst_conf["pyenv_reqfile"] = os.path.join(CONF_DIR, conf["pyenv_reqfile"])
    cmd = '''./env-py {python} {pyenv_reqfile}'''.format(**dst_conf)

    # create pyenv dir
    if not os.path.exists(conf["pyenv_download"]):
        subprocess.check_output(["mkdir", "-p", conf["pyenv_download"]])

    full_env = copy.deepcopy(os.environ)
    env = {
        "DOWNLOAD_TO": dst_conf["pyenv_download"],
        "HOME": os.environ["HOME"],
        "PYTHON_BUILD_CACHE_PATH": os.path.join(os.environ["HOME"], ".pyenv/cache")
    }
    full_env.update(env)

    sys.stderr.write("PYENV COMMAND: %s\nENV: %s\n" % (cmd, " ".join(
        ["%s=%s" % (k, v) for k, v in env.items()])))

    proc = subprocess.Popen(
        cmd, shell=True, env=full_env,
        stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    # printing stderr
    for line in iter(proc.stderr.readline, ''):
        sys.stderr.write(line)

    if not proc.returncode:
        env_id = proc.stdout.read().strip()
        print "PYENV_ID=%s" % env_id
        return

    raise Exception("Can't create Pyenv: %s" % repr(dst_conf))


def nvm_install(conf):
    dst_conf = copy.copy(conf)
    dst_conf["js_lockfile"] = os.path.join(CONF_DIR, conf["js_lockfile"])
    cmd = '''./env-js {node} {js_lockfile}'''.format(**dst_conf)

    # create download dir
    if not os.path.exists(conf["js_download"]):
        subprocess.check_output(["mkdir", "-p", conf["js_download"]])

    # create base dir
    if not os.path.exists(conf["js_base"]):
        subprocess.check_output(["mkdir", "-p", conf["js_base"]])

    # reach NVM prefix
    if os.path.exists(os.path.join(os.environ["HOME"], ".nvm/nvm.sh")):
        dst_conf["nvm_prefix"] = os.path.join(os.environ["HOME"], ".nvm")
    else:
        # get prefix via BREW/OS X
        try:
            subprocess.check_output("brew --help", shell=True)
            dst_conf["nvm_prefix"] = subprocess.check_output(
                "brew --prefix nvm", shell=True).strip()
        except Exception, e:
            raise Exception("You must specify NVM prefix within settings")

    env = {
        "NVM_PREFIX": dst_conf["nvm_prefix"],
        "NPM_PREFIX": dst_conf["js_base"],
        "HOME": os.environ["HOME"],
        "DOWNLOAD_TO": dst_conf["js_download"]
    }
    sys.stderr.write("NVM COMMAND: %s\nENV: %s\n" % (cmd, " ".join(
        ["%s=%s" % (k, v) for k, v in env.items()])))

    proc = subprocess.Popen(
        cmd, shell=True, env=env,
        stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    # printing stderr
    for line in iter(proc.stderr.readline, ''):
        sys.stderr.write(line)

    if not proc.returncode:
        env_id = proc.stdout.read().strip()
        print "NVM_ID=%s" % env_id
        return

    raise Exception("Can't create NVM environment: %s" % repr(dst_conf))



def main():
    os.chdir(DIR)
    conf = load(open(CONF_FILE))

    # TODO: handle parsing error
    if "python" in conf["env"]:
        pyenv_install(conf["env"])

    if "node" in conf["env"]:
        nvm_install(conf["env"])

    os.chdir(BASE_DIR)


if __name__ == "__main__":

    main()
