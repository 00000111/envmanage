#!/usr/bin/env /bin/sh

# it is important to not use built-in `echo` or `printf` functions

# pyenv arguments
# PYENV_ARGS=${PYENV_ARGS:-"--quiet"} # --system-site-packages

HELP=$(cat <<EO
Tool to create JAVASCRIPT virtualenvs and install dependencies using NVM and NPM.
Arguments:
  1. NodeJS Version (for example: 2.7.12)
  2. yarn.lock file. Virtualenv name will be
     created based on summary hash of dependencies
     (dependencies, devDependencies)

Virtual environment will be created using PYENV.
Required Environment variables:
  - NVM_PREFIX: path to NVM base directory

Optional environment variables:
  - DOWNLOAD_TO: path to PyPI packages downloads folder
  - NPM_PREFIX: path where NPM packages should be installed

All output are redirected to STDERR.
Expected value from STDOUT: virtualenv name (ENV_ID).
Run 'npm run start' with NODE_PATH pointed to '\$NPM_PREFIX/\$ENV_ID'

EO
    );


CALLER="env-js"


# system variables
SCRIPT_BASE=${SCRIPT_BASE:-"${BASH_SOURCE%/*}"};

# start execution
source "$SCRIPT_BASE/_env-check"

# script-specific params
NODE_VER="$1"
PACKAGE_FILE="$2"
DOWNLOAD_TEMP=${DOWNLOAD_TO:-"/tmp/download"}
NPM_PREFIX=${NPM_PREFIX:-"/opt/npm"}
help "$1" "$HELP";

# script-specific checks
[ -z "$NVM_PREFIX" ] && abort "Please, specify NVM_PREFIX environment variable (with nvm.sh)";

[ -z "$NODE_VER" ] && abort "Specify Node version as first argument";
[ -z "$PACKAGE_FILE" ] && abort "Please, specify yarn.lock file as second argument";
[ ! -f "$PACKAGE_FILE" ] && abort "yarn.lock doesn't exist";
[ -z "$NPM_PREFIX" ] && abort "Please, specify NPM_PREFIX: it shouldn't be empty";
[ ! -d "$NPM_PREFIX" ] && abort "Please, create '$NPM_PREFIX' directory first";

log "Creating directory for NPM downloads: $DOWNLOAD_TEMP";
mkdir -p "$DOWNLOAD_TEMP" >&2;

log "Activating NVM in $NVM_PREFIX";
[ ! -s "$NVM_PREFIX/nvm.sh" ] && abort "Can't find nvm.sh in $NVM_PREFIX";
source "$NVM_PREFIX/nvm.sh" >&2;

ENV_ID=$($SCRIPT_BASE/file_hash -s $PACKAGE_FILE)
[ -z "$ENV_ID" ] && abort "Can't generage ENV_ID. Aborting...";

log "Setting NODE_ENV=production";
export NODE_ENV=production

log "Creating NVM Virtual Environment: ${NODE_VER}/${ENV_ID}";
# creating nvm virtualenv
nvm install $NODE_VER >&2
nvm use --delete-prefix --silent $NODE_VER >&2

NPM_DEST="$NPM_PREFIX/$ENV_ID";

# if environment already exists
[ -d "$NPM_DEST" ] && log "Environment $ENV_ID exists" && echo $ENV_ID && exit 0

NPM_DEST_TMP="${NPM_DEST}.tmp"

log "Installing YARN package manager into $NPM_DEST_TMP";
npm install \
    --silent \
    --loglevel=silent \
    --prefix=$NPM_DEST_TMP/lib \
    yarnpkg yarn >&2

# mkdir $NPM_DEST_TMP || log "Directory $NPM_DEST_TM already created";
cd $(dirname $PACKAGE_FILE)
log "Installing dependencies into $NPM_DEST_TMP";
NODE_PATH=$NPM_DEST_TMP/lib/node_modules \
    $NPM_DEST_TMP/lib/node_modules/.bin/yarn \
    --production \
    --prefix=$NPM_DEST_TMP \
    --modules-folder=$NPM_DEST_TMP/lib/node_modules \
    --pure-lockfile --no-emoji \
    --cache-folder $DOWNLOAD_TEMP >&2

cd $(dirname $NPM_DEST_TMP);
log "Finalizing $NPM_DEST_TMP -> $NPM_DEST";
mv "$NPM_DEST_TMP" "$NPM_DEST";

echo "$ENV_ID";
